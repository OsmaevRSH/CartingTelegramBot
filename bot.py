import telebot
from telebot import types
from parsers import ArchiveParser, RaceParser
from models import ParsingError

try:
    from config import BOT_TOKEN
except ImportError:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config.py!")
    print("–°–æ–∑–¥–∞–π —Ñ–∞–π–ª config.py –Ω–∞ –æ—Å–Ω–æ–≤–µ config.py.example")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
archive_parser = ArchiveParser()
race_parser = RaceParser()


@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ä—Ç–∏–Ω–≥–∞.\n"
                         "–ö–æ–º–∞–Ω–¥—ã:\n"
                         "/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
                         "/archive - –ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤ –∑–∞–µ–∑–¥–æ–≤\n"
                         "/help - –ø–æ–º–æ—â—å")


@bot.message_handler(commands=['ping'])
def handle_ping(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    bot.reply_to(message, "pong")


@bot.message_handler(commands=['help'])
def handle_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üèÅ –ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ä—Ç–∏–Ω–≥–∞

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
/archive - –ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤ –∑–∞–µ–∑–¥–æ–≤
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å

–ë–æ—Ç –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ mayak.kartchrono.com
    """
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['archive'])
def handle_archive(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /archive"""
    try:
        bot.reply_to(message, "üîÑ –ü–∞—Ä—Å—é –∞—Ä—Ö–∏–≤ –∑–∞–µ–∑–¥–æ–≤...")
        
        day_races = archive_parser.parse()
        
        if not day_races:
            bot.reply_to(message, "‚ùå –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
            return
        
        response = "üìÖ –ê—Ä—Ö–∏–≤ –∑–∞–µ–∑–¥–æ–≤:\n\n"
        for day_race in day_races[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–∞—Ç
            date_str = day_race.date.strftime("%d.%m.%Y")
            response += f"üìÖ {date_str}\n"
            
            for race in day_race.races[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∑–∞–µ–∑–¥–∞
                response += f"  üèéÔ∏è –ó–∞–µ–∑–¥ {race.number}\n"
            
            if len(day_race.races) > 3:
                response += f"  ... –∏ –µ—â–µ {len(day_race.races) - 3} –∑–∞–µ–∑–¥–æ–≤\n"
            
            response += "\n"
        
        if len(day_races) > 5:
            response += f"... –∏ –µ—â–µ {len(day_races) - 5} –¥–∞—Ç"
        
        bot.reply_to(message, response)
        
    except ParsingError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.reply_to(message, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True) 