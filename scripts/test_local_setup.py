#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∏–º–ø–æ—Ä—Ç—ã...")
        
        from src.models.models import Race, DayRaces, Cart, Competitor, ParsingError, LapData
        print("‚úÖ –ú–æ–¥–µ–ª–∏: OK")
        
        from src.parsers.parsers import ArchiveParser, RaceParser, FullRaceInfoParser
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä—ã: OK")
        
        from src.database.db import init_db, save_competitor, get_all_competitors
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
        
        from config.config import BOT_TOKEN, DATABASE_PATH, LOG_FILE
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: OK")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        from config.config import BOT_TOKEN, DATABASE_PATH, LOG_FILE, LOG_LEVEL
        
        if not BOT_TOKEN:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            print("‚ùå BOT_TOKEN –Ω–µ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
            return False
            
        print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: –Ω–∞—Å—Ç—Ä–æ–µ–Ω ({BOT_TOKEN[:10]}...)")
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")
        print(f"‚úÖ –õ–æ–≥ —Ñ–∞–π–ª: {LOG_FILE}")
        print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {LOG_LEVEL}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_directories():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
        
        required_dirs = [
            "src",
            "src/bot",
            "src/database", 
            "src/models",
            "src/parsers",
            "config",
            "scripts",
            "data",
            "logs"
        ]
        
        for dir_path in required_dirs:
            if Path(dir_path).exists():
                print(f"‚úÖ {dir_path}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå {dir_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
        return False

def test_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ñ–∞–π–ª—ã...")
        
        required_files = [
            "main.py",
            "requirements.txt",
            ".env",
            "config/config.py",
            "run_bot.sh",
            "docker-compose.yml"
        ]
        
        for file_path in required_files:
            if Path(file_path).exists():
                print(f"‚úÖ {file_path}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå {file_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CartingBot")
    print("=" * 50)
    
    all_tests_passed = True
    
    # –¢–µ—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if not test_directories():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤
    if not test_files():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    if not test_imports():
        all_tests_passed = False
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not test_config():
        all_tests_passed = False
    
    print("\n" + "=" * 50)
    if all_tests_passed:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: ./run_bot.sh")
        sys.exit(0)
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞")
        sys.exit(1)

if __name__ == "__main__":
    main() 