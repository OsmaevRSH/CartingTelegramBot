#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
"""

import sys
import os
from pathlib import Path
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.database.db import DB_FILE, get_all_competitors


def main():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
    print("=" * 35)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ë–î
    if not DB_FILE.exists():
        print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω:", DB_FILE)
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        return
    
    print(f"üìÅ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DB_FILE}")
    print(f"üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {DB_FILE.stat().st_size / 1024:.1f} KB")
    print()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_competitors = get_all_competitors()
        
        if not all_competitors:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_races = len(all_competitors)
        unique_users = len(set(comp[0] for comp in all_competitors))
        unique_dates = len(set(comp[1] for comp in all_competitors))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_stats = defaultdict(int)
        date_stats = defaultdict(int)
        
        for comp in all_competitors:
            user_id = comp[0]
            date = comp[1]
            user_stats[user_id] += 1
            date_stats[date] += 1
        
        # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üèÅ –í—Å–µ–≥–æ –∑–∞–µ–∑–¥–æ–≤: {total_races}")
        print(f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
        print(f"   üìÖ –î–Ω–µ–π —Å –∑–∞–µ–∑–¥–∞–º–∏: {unique_dates}")
        print()
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üèÜ –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        sorted_users = sorted(user_stats.items(), key=lambda x: x[1], reverse=True)
        for i, (user_id, count) in enumerate(sorted_users[:10], 1):
            print(f"   {i:2d}. ID:{user_id} - {count} –∑–∞–µ–∑–¥–æ–≤")
        
        if len(sorted_users) > 10:
            print(f"   ... –∏ –µ—â—ë {len(sorted_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
        print("üìÖ –ê–ö–¢–ò–í–ù–´–ï –î–ê–¢–´:")
        sorted_dates = sorted(date_stats.items(), key=lambda x: x[1], reverse=True)
        for i, (date, count) in enumerate(sorted_dates[:10], 1):
            print(f"   {i:2d}. {date} - {count} –∑–∞–µ–∑–¥–æ–≤")
        
        if len(sorted_dates) > 10:
            print(f"   ... –∏ –µ—â—ë {len(sorted_dates) - 10} –¥–Ω–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


if __name__ == "__main__":
    main() 