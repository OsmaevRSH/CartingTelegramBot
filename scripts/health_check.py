#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
"""
import sys
import os
import asyncio
import aiohttp
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.database.db import get_all_competitors
from src.parsers.parsers import ArchiveParser
from src.models.models import ParsingError

async def check_website():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ kartchrono.com"""
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get("https://mayak.kartchrono.com/archive/") as response:
                if response.status == 200:
                    return True, "–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
                else:
                    return False, f"–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status})"
    except aiohttp.ClientError as e:
        return False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"
    except Exception as e:
        return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

async def check_parser():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        parser = ArchiveParser()
        day_races = await parser.parse()
        if day_races:
            return True, f"–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(day_races)} –¥–Ω–µ–π)"
        else:
            return False, "–ü–∞—Ä—Å–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö"
    except ParsingError as e:
        return False, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}"
    except Exception as e:
        return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        competitors = get_all_competitors()
        return True, f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(competitors)} –∑–∞–ø–∏—Å–µ–π)"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"

def check_log_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥ —Ñ–∞–π–ª–∞"""
    try:
        log_file = "logs/bot.log"
        if os.path.exists(log_file):
            stat = os.stat(log_file)
            modified_time = datetime.fromtimestamp(stat.st_mtime)
            now = datetime.now()
            
            if now - modified_time < timedelta(hours=1):
                return True, "–õ–æ–≥ —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª–µ–Ω"
            else:
                return False, "–õ–æ–≥ —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª"
        else:
            return False, "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥ —Ñ–∞–π–ª–∞: {e}"

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è CartingBot...")
    print("=" * 50)
    
    all_ok = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞...")
    site_ok, site_msg = await check_website()
    print(f"   {'‚úÖ' if site_ok else '‚ùå'} {site_msg}")
    all_ok = all_ok and site_ok
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞...")
    parser_ok, parser_msg = await check_parser()
    print(f"   {'‚úÖ' if parser_ok else '‚ùå'} {parser_msg}")
    all_ok = all_ok and parser_ok
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    db_ok, db_msg = check_database()
    print(f"   {'‚úÖ' if db_ok else '‚ùå'} {db_msg}")
    all_ok = all_ok and db_ok
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥ —Ñ–∞–π–ª–∞
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥ —Ñ–∞–π–ª–∞...")
    log_ok, log_msg = check_log_file()
    print(f"   {'‚úÖ' if log_ok else '‚ùå'} {log_msg}")
    all_ok = all_ok and log_ok
    
    print("\n" + "=" * 50)
    if all_ok:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 