import logging
from datetime import date
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, MessageHandler, filters
)
from src.parsers.parsers import ArchiveParser, RaceParser, FullRaceInfoParser
from src.models.models import ParsingError
from src.database.db import init_db, save_competitor, get_user_competitors, get_competitor_by_key, delete_competitor, get_all_competitors, get_best_competitors, get_best_competitors_today
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

try:
    from config.config import BOT_TOKEN
    if not BOT_TOKEN:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ –¥–æ–±–∞–≤—å –≤ —Ñ–∞–π–ª .env")
        exit(1)
except ImportError:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config/config.py!")
    print("–°–æ–∑–¥–∞–π —Ñ–∞–π–ª config/config.py –Ω–∞ –æ—Å–Ω–æ–≤–µ config/config.py.example")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
archive_parser = ArchiveParser()
race_parser = RaceParser()
full_race_parser = FullRaceInfoParser()

# -------------------- Conversation states --------------------
SELECT_USER, SELECT_DATE, SHOW_RACES, SHOW_CARTS = range(4)


def _format_lap_times_table(lap_times_json: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–≥–∞—Ö –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    if not lap_times_json:
        return "üìä –î–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–≥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    try:
        lap_times = json.loads(lap_times_json)
        if not lap_times:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä—É–≥–∞—Ö"
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        table = "```\n"
        table += f"{'#':^2}  {'–í—Ä–µ–º—è':<8}  {'S1':<8}  {'S2':<8}  {'S3':<8}  {'S4':<8}\n"
        table += f"{'--':^2}  {'--------':<8}  {'--------':<8}  {'--------':<8}  {'--------':<8}  {'--------':<8}\n"
        
        for lap in lap_times:
            lap_num = lap['lap_number']
            lap_time = lap['lap_time'] or "-"
            sector1 = lap['sector1'] or "-"
            sector2 = lap['sector2'] or "-"
            sector3 = lap['sector3'] or "-"
            sector4 = lap['sector4'] or "-"
            
            # –î–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ S2, S3, S4
            if lap_num == 0:
                lap_label = "S"
                s1_display = "-"
            else:
                lap_label = f"{lap_num}"
                s1_display = sector1
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–µ–≤—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            table += f"{lap_label:^2}  {lap_time:<8}  {s1_display:<8}  {sector2:<8}  {sector3:<8}  {sector4:<8}\n"
        
        table += "```"
        return table
        
    except json.JSONDecodeError:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä—É–≥–∞—Ö"




async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
    if update and hasattr(update, 'effective_message') and update.effective_message:
        try:
            error_msg = str(context.error)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "readonly database" in error_msg.lower():
                user_error = "‚ùå **–ü–†–û–ë–õ–ï–ú–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•**\n\nüîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            elif "network" in error_msg.lower() or "connection" in error_msg.lower():
                user_error = "‚ùå **–ü–†–û–ë–õ–ï–ú–ê –° –°–ï–¢–¨–Æ**\n\nüåê –ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∫–∞—Ä—Ç.\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            elif "parsing" in error_msg.lower():
                user_error = "‚ùå **–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•**\n\nüìÑ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞.\nüí° –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            elif "timeout" in error_msg.lower():
                user_error = "‚ùå **–ü–†–ï–í–´–®–ï–ù–û –í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø**\n\n‚è±Ô∏è –°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            else:
                user_error = "‚ùå **–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**\n\nüîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            await update.effective_message.reply_text(user_error)
            
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.error("Failed to send error message to user")


async def _set_default_commands(app: Application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    await app.bot.set_my_commands([
        BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–µ–∑–¥"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand("best", "–†–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–æ–≤"),
        BotCommand("best_today", "–†–µ–π—Ç–∏–Ω–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"),
    ])


# =============================================================
#  –ö–æ–º–∞–Ω–¥–∞ /add   (–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–µ–∑–¥)
# =============================================================

# helpers ------------------------------------------------------

def _build_keyboard(rows):
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboardMarkup."""
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=data) for text, data in row] for row in rows])


def _send_user_keyboard(target, context):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏/–∫–æ–ª–±—ç–∫–µ target."""
    users_ordered = context.user_data.get("user_options", [])
    if not users_ordered:
        # safety-fallback: –ø–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞
        chat_id = target.message.chat.id if hasattr(target, "message") else target.chat_id
        users_ordered = [context.bot.get_chat_member(chat_id, chat_id).user]
    keyboard = _build_keyboard([[(u.full_name or u.username or str(u.id), f"user_{u.id}")] for u in users_ordered])
    if isinstance(target, Update):
        return target.message.reply_text("–ö–æ–≥–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º?", reply_markup=keyboard)
    else:
        return target.edit_message_text("–ö–æ–≥–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º?", reply_markup=keyboard)


# step 0 ‚Äì entry ------------------------------------------------

async def add_race_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–µ–∑–¥–∞."""
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
    try:
        message_to_delete = update.message or update.edited_message
        if message_to_delete:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            chat_member = await context.bot.get_chat_member(chat_id, context.bot.id)
            if chat_member.can_delete_messages or chat_member.status in ['administrator', 'creator']:
                await message_to_delete.delete()
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é "üóëÔ∏è" –Ω–∞ –∫–æ–º–∞–Ω–¥—É
                try:
                    await message_to_delete.set_reaction("üóëÔ∏è")
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
    except Exception as e:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import logging
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {e}")
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ö–æ—Ç—è –±—ã –æ–Ω–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã)
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        users = [adm.user for adm in admins]
    except Exception:
        users = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞, –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ id
    initiator = update.effective_user
    users_dict = {initiator.id: initiator}
    for u in users:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if u.id != context.bot.id:
            users_dict.setdefault(u.id, u)

    users_ordered = list(users_dict.values())
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
    context.user_data["user_options"] = users_ordered

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äì –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = _build_keyboard([[(u.full_name or u.username or str(u.id), f"user_{u.id}")] for u in users_ordered])

    await context.bot.send_message(chat_id=chat_id, text="–ö–æ–≥–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º?", reply_markup=keyboard)
    return SELECT_USER


# step 1 ‚Äì user selected ---------------------------------------

async def select_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = int(query.data.split("_", 1)[1])
    context.user_data["selected_user"] = user_id

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sel_user = next((u for u in context.user_data["user_options"] if u.id == user_id), None)
    context.user_data["selected_user_name"] = sel_user.full_name or sel_user.username if sel_user else str(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏–≤ –∑–∞–µ–∑–¥–æ–≤
    try:
        day_races = await archive_parser.parse()
    except ParsingError as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä—Ö–∏–≤–∞: {e}")
        return ConversationHandler.END

    # –û—Ç–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    today = date.today()
    today_dr = next((dr for dr in day_races if dr.date.date() == today), None)
    other_dates = [dr for dr in day_races if dr.date.date() != today]
    context.user_data["other_dates"] = other_dates

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await _send_date_page(query, context, today_exists=bool(today_dr), page=0)
    return SELECT_DATE


# helpers ------------------------------------------------------

PAGE_SIZE = 10


async def _send_date_page(query, context, today_exists: bool, page: int):
    dates = context.user_data["other_dates"]
    context.user_data["last_page"] = page
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    slice_dates = dates[start:end]

    rows = []
    if today_exists:
        rows.append([("–°–µ–≥–æ–¥–Ω—è", "date_today")])

    # –∫–Ω–æ–ø–∫–∏ –¥–∞—Ç
    for idx, dr in enumerate(slice_dates, start=start):
        rows.append([(dr.date.strftime("%d.%m.%Y"), f"date_{idx}")])

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    nav = []
    if start > 0:
        nav.append(("¬´ –ù–∞–∑–∞–¥", f"page_{page-1}"))
    if end < len(dates):
        nav.append(("–í–ø–µ—Ä—ë–¥ ¬ª", f"page_{page+1}"))
    if nav:
        rows.append(nav)

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    rows.append([("‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "back_users")])

    keyboard = _build_keyboard(rows)
    user_text = context.user_data.get("selected_user_name", "")
    subtitle = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}\n"
    text = subtitle + ("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:" if slice_dates else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    await query.edit_message_text(text, reply_markup=keyboard)


async def _send_races_page(query, context, page: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–µ–∑–¥–æ–≤"""
    races = context.user_data.get("current_races", [])
    context.user_data["races_page"] = page
    
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    slice_races = races[start:end]

    rows = []
    # –∫–Ω–æ–ø–∫–∏ –∑–∞–µ–∑–¥–æ–≤
    for idx, race in enumerate(slice_races, start=start):
        rows.append([(f"–ó–∞–µ–∑–¥ {race.number}", f"race_{idx}")])

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∑–∞–µ–∑–¥–æ–≤
    nav = []
    if start > 0:
        nav.append(("¬´ –ù–∞–∑–∞–¥", f"races_page_{page-1}"))
    if end < len(races):
        nav.append(("–í–ø–µ—Ä—ë–¥ ¬ª", f"races_page_{page+1}"))
    if nav:
        rows.append(nav)

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º
    rows.append([("‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", "back_dates")])

    keyboard = _build_keyboard(rows)
    header = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {context.user_data.get('selected_user_name','')}\n"
        f"–î–∞—Ç–∞: {context.user_data.get('selected_date_text','')}\n"
        f"–í—Å–µ–≥–æ –∑–∞–µ–∑–¥–æ–≤: {len(races)}"
    )
    await query.edit_message_text(f"{header}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–µ–∑–¥:", reply_markup=keyboard)


# step 2 ‚Äì pagination ------------------------------------------

async def date_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    page = int(query.data.split("_", 1)[1])
    
    # –ø–æ–ª—É—á–∞–µ–º today_exists –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    dates = context.user_data.get("other_dates", [])
    today = date.today()
    today_exists = any(dr.date.date() == today for dr in dates)
    
    await _send_date_page(query, context, today_exists=today_exists, page=page)
    return SELECT_DATE


async def races_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–µ–∑–¥–æ–≤"""
    query = update.callback_query
    await query.answer()
    page = int(query.data.split("_", 2)[2])
    
    await _send_races_page(query, context, page=page)
    return SHOW_RACES


# step 3 ‚Äì date chosen -----------------------------------------

async def select_date_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    key = query.data.split("_", 1)[1]

    if key == "today":
        sel_date = date.today()
        # –∏—â–µ–º –≤ –∫—ç—à–µ other_dates –∏–ª–∏ –ø–∞—Ä—Å–∏–º –∑–∞–Ω–æ–≤–æ
        dr_list = context.user_data.get("other_dates", [])
        day_race = next((dr for dr in dr_list if dr.date.date() == sel_date), None)
        if day_race is None:
            # fallback ‚Äì –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å
            day_races = await archive_parser.parse()
            day_race = next((dr for dr in day_races if dr.date.date() == sel_date), None)
    else:
        idx = int(key)
        day_race = context.user_data["other_dates"][idx]

    if not day_race:
        await query.edit_message_text("‚ùå –ó–∞–µ–∑–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ —Å–ø–∏—Å–æ–∫ –∑–∞–µ–∑–¥–æ–≤
    date_text = "–°–µ–≥–æ–¥–Ω—è" if key == "today" else day_race.date.strftime("%d.%m.%Y")
    # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    actual_date = date.today().strftime("%d.%m.%Y") if key == "today" else day_race.date.strftime("%d.%m.%Y")
    context.user_data["selected_date_text"] = date_text
    context.user_data["selected_date_actual"] = actual_date
    context.user_data["current_races"] = day_race.races

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–µ–∑–¥–æ–≤  
    await _send_races_page(query, context, page=0)
    return SHOW_RACES


# step 4 ‚Äì back to dates ---------------------------------------

async def back_to_dates_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é)
    page = context.user_data.get("last_page", 0)
    await _send_date_page(query, context, today_exists=True, page=page)
    return SELECT_DATE


# step 5 ‚Äì back to user list ------------------------------------

async def back_to_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await _send_user_keyboard(query, context)
    return SELECT_USER


# step 4b ‚Äì race selected --------------------------------------

async def race_selected_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_", 1)[1])
    races_list = context.user_data.get("current_races", [])
    if idx >= len(races_list):
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–µ–∑–¥")
        return ConversationHandler.END

    race = races_list[idx]

    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–µ–∑–¥–∞
    try:
        carts = await race_parser.parse(race.href)
    except ParsingError as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return ConversationHandler.END

    context.user_data["current_carts"] = carts
    context.user_data["selected_race_number"] = race.number
    context.user_data["selected_race_href"] = race.href

    # build cart buttons
    cart_buttons = [[(f"–ö–∞—Ä—Ç {c.number} ‚è± {c.best_lap}", f"cart_{idx}")] for idx, c in enumerate(carts[:10])]
    cart_buttons.append([("‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∑–∞–µ–∑–¥–∞", "back_races")])

    keyboard = _build_keyboard(cart_buttons)

    header = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {context.user_data.get('selected_user_name','')}\n"
        f"–î–∞—Ç–∞: {context.user_data.get('selected_date_text','')}\n"
        f"–ó–∞–µ–∑–¥: {race.number}"
    )

    await query.edit_message_text(f"{header}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç:", reply_markup=keyboard)
    return SHOW_CARTS


# step 4c ‚Äì cart selected --------------------------------------

async def cart_selected_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_",1)[1])
    carts = context.user_data.get("current_carts", [])
    if idx >= len(carts):
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç")
        return ConversationHandler.END

    cart = carts[idx]
    
    # –ü–æ–ª—É—á–∞–µ–º href –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–µ–∑–¥–∞
    race_href = context.user_data.get("selected_race_href", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–µ–∑–¥–µ
    try:
        await query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–µ–∑–¥–µ...")
        competitors = await full_race_parser.parse(race_href, carts)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
        selected_competitor = None
        for competitor in competitors:
            if competitor.num == cart.number:
                selected_competitor = competitor
                break
        
        if not selected_competitor:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—Ä—Ç–µ")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ
        competitor_data = {
            'id': selected_competitor.id,
            'num': selected_competitor.num,
            'name': selected_competitor.name,
            'pos': selected_competitor.pos,
            'laps': selected_competitor.laps,
            'theor_lap': selected_competitor.theor_lap,
            'best_lap': selected_competitor.best_lap,
            'binary_laps': selected_competitor.binary_laps,
            'theor_lap_formatted': selected_competitor.theor_lap_formatted,
            'display_name': selected_competitor.display_name,
            'gap_to_leader': selected_competitor.gap_to_leader,
            'lap_times': selected_competitor.lap_times,
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        try:
            save_result = save_competitor(
                user_id=context.user_data.get("selected_user"),
                date=context.user_data.get("selected_date_actual",""),
                race_number=context.user_data.get("selected_race_number",""),
                race_href=race_href,
                competitor_data=competitor_data
            )
            
            if save_result:
                resp = (
                    "‚úÖ **–ó–ê–ï–ó–î –°–û–•–†–ê–ù–Å–ù** ‚úÖ\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {context.user_data.get('selected_user_name','')}\n"
                    f"üìÖ –î–∞—Ç–∞: {context.user_data.get('selected_date_text','')}\n"
                    f"üèÅ –ó–∞–µ–∑–¥: {context.user_data.get('selected_race_number','')}\n"
                    f"üèéÔ∏è –ö–∞—Ä—Ç: {selected_competitor.num}\n"
                    f"‚è±Ô∏è –õ—É—á—à–∏–π –∫—Ä—É–≥: {selected_competitor.best_lap}\n\n"
                    "üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—Ä—É–≥–∞—Ö!"
                )
            else:
                resp = (
                    "‚ö†Ô∏è **–ó–ê–ï–ó–î –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢** ‚ö†Ô∏è\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {context.user_data.get('selected_user_name','')}\n"
                    f"üìÖ –î–∞—Ç–∞: {context.user_data.get('selected_date_text','')}\n"
                    f"üèÅ –ó–∞–µ–∑–¥: {context.user_data.get('selected_race_number','')}\n"
                    f"üèéÔ∏è –ö–∞—Ä—Ç: {selected_competitor.num}\n\n"
                    "‚ÑπÔ∏è –≠—Ç–æ—Ç –∑–∞–µ–∑–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                )
            await query.edit_message_text(resp)
            
        except Exception as e:
            # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            error_msg = str(e)
            if "readonly database" in error_msg.lower():
                user_error = "‚ùå **–û–®–ò–ë–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê**\n\nüîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.\nüí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."
            elif "no such table" in error_msg.lower():
                user_error = "‚ùå **–û–®–ò–ë–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•**\n\nüóÉÔ∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."
            elif "constraint" in error_msg.lower():
                user_error = "‚ùå **–û–®–ò–ë–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø**\n\nüìã –¢–∞–∫–æ–π –∑–∞–µ–∑–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–µ–∑–¥."
            else:
                user_error = f"‚ùå **–û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø**\n\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg[:100]}\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            await query.edit_message_text(user_error)
        
    except ParsingError as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)[:100]}")
        return ConversationHandler.END
    
    return ConversationHandler.END


# back to races from carts --------------------------------------

async def back_to_races_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–µ–∑–¥–æ–≤ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –≤—ã–¥–∞—á–µ–π
    page = context.user_data.get("races_page", 0)
    await _send_races_page(query, context, page=page)
    return SHOW_RACES


# –∫–æ–º–∞–Ω–¥–∞ /stats ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
    try:
        message_to_delete = update.message or update.edited_message
        if message_to_delete:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            chat_member = await context.bot.get_chat_member(chat_id, context.bot.id)
            if chat_member.can_delete_messages or chat_member.status in ['administrator', 'creator']:
                await message_to_delete.delete()
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é "üóëÔ∏è" –Ω–∞ –∫–æ–º–∞–Ω–¥—É
                try:
                    await message_to_delete.set_reaction("üóëÔ∏è")
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
    except Exception as e:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import logging
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {e}")
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–µ–∑–¥—ã
    all_competitors = get_all_competitors()
    if not all_competitors:
        await context.bot.send_message(chat_id=chat_id, text="üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–µ–∑–¥–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞)
    user_ids = set()
    for comp in all_competitors:
        user_id = comp[0]  # user_id - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if user_id != context.bot.id:
            user_ids.add(user_id)

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        users_info = {adm.user.id: adm.user for adm in admins if adm.user.id != context.bot.id}
    except:
        users_info = {}

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–µ –±–æ—Ç)
    initiator = update.effective_user
    if initiator.id != context.bot.id:
        users_info[initiator.id] = initiator

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    users_list = []
    for user_id in user_ids:
        if user_id in users_info:
            user = users_info[user_id]
            users_list.append((user.full_name or user.username or f"ID:{user_id}", f"stats_user_{user_id}"))
        else:
            users_list.append((f"ID:{user_id}", f"stats_user_{user_id}"))

    if not users_list:
        await context.bot.send_message(chat_id=chat_id, text="üìä –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–µ–∑–¥–∞–º–∏.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = _build_keyboard([users_list[i:i+1] for i in range(len(users_list))])
    await context.bot.send_message(chat_id=chat_id, text="üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    application.post_init = _set_default_commands

    # Handler for /add command conversation (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @username)
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("add", add_race_command),
            MessageHandler(filters.Regex(r'^/add@\w+'), add_race_command)
        ],
        states={
            SELECT_USER: [CallbackQueryHandler(select_user_callback, pattern=r"^user_\d+$")],
            SELECT_DATE: [
                CallbackQueryHandler(date_page_callback, pattern=r"^page_\d+$"),
                CallbackQueryHandler(select_date_callback, pattern=r"^date_.*$"),
                CallbackQueryHandler(back_to_users_callback, pattern=r"^back_users$"),
            ],
            SHOW_RACES: [
                CallbackQueryHandler(back_to_dates_callback, pattern=r"^back_dates$"),
                CallbackQueryHandler(races_page_callback, pattern=r"^races_page_\d+$"),
                CallbackQueryHandler(race_selected_callback, pattern=r"^race_\d+$"),
            ],
            SHOW_CARTS: [
                CallbackQueryHandler(back_to_races_callback, pattern=r"^back_races$"),
                CallbackQueryHandler(cart_selected_callback, pattern=r"^cart_\d+$"),
            ],
        },
        fallbacks=[],
    )
    application.add_handler(conv)

    # –∫–æ–º–∞–Ω–¥–∞ /stats ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @username)
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(MessageHandler(filters.Regex(r'^/stats@\w+'), stats_command))
    


    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async def stats_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data
        data_parts = query.data.split("_")
        user_id = int(data_parts[2])
        page = int(data_parts[3]) if len(data_parts) > 3 else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        competitors = get_user_competitors(user_id)
        
        if competitors:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                chat_member = await context.bot.get_chat_member(update.effective_chat.id, user_id)
                user_name = chat_member.user.full_name or chat_member.user.username or f"ID:{user_id}"
            except:
                user_name = f"ID:{user_id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã
            text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê {user_name.upper()}** üìä\n\n"
            text += f"üìà –í—Å–µ–≥–æ –∑–∞–µ–∑–¥–æ–≤: {len(competitors)}\n\n"
            text += "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–µ–∑–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ 10 –∑–∞–µ–∑–¥–æ–≤
            start_idx = page * 10
            end_idx = start_idx + 10
            page_competitors = competitors[start_idx:end_idx]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            rows = []
            for comp_data in page_competitors:
                date, race_number, race_href, competitor_id, num, name, pos, laps, theor_lap, best_lap, binary_laps, theor_lap_formatted, display_name, gap_to_leader, lap_times_json = comp_data
                
                race_part = race_number.strip()
                if not race_part.lower().startswith("–∑–∞–µ–∑–¥") and not race_part.startswith("–ó"):
                    race_part = f"–ó–∞–µ–∑–¥ {race_part}"
                
                button_text = f"{date[:5]} {race_part[:12]} #{num} | {pos} –º–µ—Å—Ç–æ | {best_lap}"
                key = f"{date}|{race_number}|{num}|{user_id}"
                rows.append([(button_text, f"view_stats_{key}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"stats_user_{user_id}_{page-1}"))
            if end_idx < len(competitors):
                nav_buttons.append(("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", f"stats_user_{user_id}_{page+1}"))
            
            if nav_buttons:
                rows.append(nav_buttons)
            
            keyboard = _build_keyboard(rows)
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await query.edit_message_text(f"üìä –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:{user_id} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–µ–∑–¥–æ–≤.")

    application.add_handler(CallbackQueryHandler(stats_user_callback, pattern=r"^stats_user_\d+(_\d+)?$"))

    # –∫–æ–º–∞–Ω–¥–∞ /best ‚Äì –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    async def best_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –≥–æ–Ω—â–∏–∫–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await update.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
        competitors = get_best_competitors(20)
        
        if not competitors:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
            return
        
        text = "üèÜ **–†–ï–ô–¢–ò–ù–ì –õ–£–ß–®–ò–• –ì–û–ù–©–ò–ö–û–í** üèÜ\n"
        text += "```\n"
        text += f"{'#':^2} {'–ì–æ–Ω—â–∏–∫':<22} {'–ö–∞—Ä—Ç':<6} {'–í—Ä–µ–º—è':<8}\n"
        text += f"{'--':^2} {'----------------------':<22} {'------':<6} {'--------':<8}\n"
        
        chat_id = update.effective_chat.id
        
        for i, comp in enumerate(competitors, 1):
            user_id, date, race_number, num, name, display_name, theor_lap, theor_lap_formatted, best_lap, pos = comp
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            show_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–º—è –∏–∑ –∑–∞–µ–∑–¥–∞
            if name and name.strip() and not display_name.startswith("–ö–∞—Ä—Ç #"):
                show_name = name[:22]
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —á–µ—Ä–µ–∑ Telegram API
                try:
                    chat_member = await context.bot.get_chat_member(chat_id, user_id)
                    if chat_member.user.full_name:
                        show_name = chat_member.user.full_name[:22]
                    elif chat_member.user.username:
                        show_name = f"@{chat_member.user.username}"[:22]
                    else:
                        show_name = f"ID:{user_id}"[:22]
                except:
                    show_name = f"ID:{user_id}"[:22]
            
            cart_num = f"#{num}"[:6]  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 6 —Å–∏–º–≤–æ–ª–æ–≤
            text += f"{i:^2} {show_name:<22} {cart_num:<6} {best_lap:<8}\n"
        text += "```\n"
        text += "‚è±Ô∏è –†–µ–π—Ç–∏–Ω–≥ –ø–æ –ª—É—á—à–µ–º—É –∫—Ä—É–≥—É"
        
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Markdown')

    application.add_handler(CommandHandler("best", best_command))
    application.add_handler(MessageHandler(filters.Regex(r'^/best@\w+'), best_command))

    # –∫–æ–º–∞–Ω–¥–∞ /best_today ‚Äì —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    async def best_today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –≥–æ–Ω—â–∏–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await update.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
        from datetime import date
        today = date.today().strftime("%d.%m.%Y")
        
        competitors = get_best_competitors_today(today, 20)
        
        if not competitors:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="üèÜ –°–µ–≥–æ–¥–Ω—è –∑–∞–µ–∑–¥–æ–≤ –Ω–µ –±—ã–ª–æ.")
            return
        
        text = f"üèÜ **–†–ï–ô–¢–ò–ù–ì –ó–ê –°–ï–ì–û–î–ù–Ø ({today})** üèÜ\n"
        text += "```\n"
        text += f"{'#':^2} {'–ì–æ–Ω—â–∏–∫':<22} {'–ö–∞—Ä—Ç':<6} {'–í—Ä–µ–º—è':<8}\n"
        text += f"{'--':^2} {'----------------------':<22} {'------':<6} {'--------':<8}\n"
        
        chat_id = update.effective_chat.id
        
        for i, comp in enumerate(competitors, 1):
            user_id, date, race_number, num, name, display_name, theor_lap, theor_lap_formatted, best_lap, pos = comp
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            show_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–º—è –∏–∑ –∑–∞–µ–∑–¥–∞
            if name and name.strip() and not display_name.startswith("–ö–∞—Ä—Ç #"):
                show_name = name[:22]
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —á–µ—Ä–µ–∑ Telegram API
                try:
                    chat_member = await context.bot.get_chat_member(chat_id, user_id)
                    if chat_member.user.full_name:
                        show_name = chat_member.user.full_name[:22]
                    elif chat_member.user.username:
                        show_name = f"@{chat_member.user.username}"[:22]
                    else:
                        show_name = f"ID:{user_id}"[:22]
                except:
                    show_name = f"ID:{user_id}"[:22]
            
            cart_num = f"#{num}"[:6]  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 6 —Å–∏–º–≤–æ–ª–æ–≤
            text += f"{i:^2} {show_name:<22} {cart_num:<6} {best_lap:<8}\n"
        text += "```\n"
        text += "‚è±Ô∏è –†–µ–π—Ç–∏–Ω–≥ –ø–æ –ª—É—á—à–µ–º—É –∫—Ä—É–≥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Markdown')

    application.add_handler(CommandHandler("best_today", best_today_command))
    application.add_handler(MessageHandler(filters.Regex(r'^/best_today@\w+'), best_today_command))

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–µ–∑–¥–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async def view_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        key = query.data.split("_", 2)[2]
        d, rn, cn, user_id = key.split("|")
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–µ–∑–¥–∞
        comp_data = get_competitor_by_key(user_id, d, rn, cn)
        
        if comp_data:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            date, race_number, race_href, competitor_id, num, name, pos, laps, theor_lap, best_lap, binary_laps, theor_lap_formatted, display_name, gap_to_leader, lap_times_json = comp_data
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∞
            name_line = ""
            if name.strip() and not display_name.startswith("–ö–∞—Ä—Ç #"):
                name_line = f"üë§ –ò–º—è: {name}\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            basic_info = (
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üèÅ –ó–∞–µ–∑–¥: {race_number}\n"
                f"üèéÔ∏è –ö–∞—Ä—Ç: {num}\n"
                f"{name_line}"
                f"üèÜ –ü–æ–∑–∏—Ü–∏—è: {pos}\n"
                f"‚è±Ô∏è –õ—É—á—à–∏–π –∫—Ä—É–≥: {best_lap}\n"
                f"üî¨ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä—É–≥: {theor_lap_formatted}\n"
                f"üìä –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: {gap_to_leader}\n"
                f"üîÑ –ö—Ä—É–≥–æ–≤: {laps}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫—Ä—É–≥–æ–≤
            lap_table = _format_lap_times_table(lap_times_json)
            
            text = basic_info + "üìã –î–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä—É–≥–∞–º:\n" + lap_table
        else:
            text = "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        buttons = [
            [("üóë –£–¥–∞–ª–∏—Ç—å", f"askdel_stats_{d}|{rn}|{cn}|{user_id}")],
            [("‚Üê –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", f"stats_user_{user_id}")],
        ]
        await query.edit_message_text(text, reply_markup=_build_keyboard(buttons), parse_mode='Markdown')

    application.add_handler(CallbackQueryHandler(view_stats_callback, pattern=r"^view_stats_"))



    # -------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ----------

    async def ask_delete_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        key = query.data.split("_", 2)[2]
        d, rn, cn, user_id = key.split("|")
        user_id = int(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–µ–∑–¥–∞
        comp_data = get_competitor_by_key(user_id, d, rn, cn)
        
        if comp_data:
            date, race_number, race_href, competitor_id, num, name, pos, laps, theor_lap, best_lap, binary_laps, theor_lap_formatted, display_name, gap_to_leader, lap_times_json = comp_data
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∞
            name_line = ""
            if name.strip() and not display_name.startswith("–ö–∞—Ä—Ç #"):
                name_line = f"üë§ –ò–º—è: {name}\n"
            
            confirm_text = (
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üèÅ –ó–∞–µ–∑–¥: {race_number}\n"
                f"üèéÔ∏è –ö–∞—Ä—Ç: {num}\n"
                f"{name_line}"
                f"üèÜ –ü–æ–∑–∏—Ü–∏—è: {pos}\n"
                f"‚è±Ô∏è –õ—É—á—à–∏–π –∫—Ä—É–≥: {best_lap}\n"
                f"üî¨ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä—É–≥: {theor_lap_formatted}\n"
                f"üìä –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: {gap_to_leader}\n"
                f"üîÑ –ö—Ä—É–≥–æ–≤: {laps}\n\n"
                "‚ùì –¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?"
            )
        else:
            confirm_text = (
                f"üìÖ –î–∞—Ç–∞: {d}\n"
                f"üèÅ –ó–∞–µ–∑–¥: {rn}\n"
                f"üèéÔ∏è –ö–∞—Ä—Ç: {cn}\n\n"
                "‚ùì –¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?"
            )

        buttons = [[("üóë –£–¥–∞–ª–∏—Ç—å", f"del_stats_{key}"), ("–û—Ç–º–µ–Ω–∞", f"cancel_stats_{key}")]]
        await query.edit_message_text(confirm_text, reply_markup=_build_keyboard(buttons))

    async def delete_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        key = query.data.split("_", 2)[2]
        d, rn, cn, user_id = key.split("|")
        user_id = int(user_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            ok_competitor = delete_competitor(user_id, d, rn, cn)
            
            if ok_competitor:
                await query.edit_message_text("‚úÖ **–ó–ê–ü–ò–°–¨ –£–î–ê–õ–ï–ù–ê**\n\nüóëÔ∏è –ó–∞–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            else:
                await query.edit_message_text("‚ö†Ô∏è **–ó–ê–ü–ò–°–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê**\n\nüîç –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ")
                
        except Exception as e:
            # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            error_msg = str(e)
            if "readonly database" in error_msg.lower():
                user_error = "‚ùå **–û–®–ò–ë–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê**\n\nüîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.\nüí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."
            elif "no such table" in error_msg.lower():
                user_error = "‚ùå **–û–®–ò–ë–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•**\n\nüóÉÔ∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞."
            else:
                user_error = f"‚ùå **–û–®–ò–ë–ö–ê –£–î–ê–õ–ï–ù–ò–Ø**\n\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg[:100]}\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            await query.edit_message_text(user_error)

    async def cancel_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–µ–∑–¥–∞."""
        query = update.callback_query
        await query.answer()

        key = query.data.split("_", 2)[2]
        d, rn, cn, user_id = key.split("|")
        user_id = int(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–µ–∑–¥–∞
        comp_data = get_competitor_by_key(user_id, d, rn, cn)
        
        if comp_data:
            date, race_number, race_href, competitor_id, num, name, pos, laps, theor_lap, best_lap, binary_laps, theor_lap_formatted, display_name, gap_to_leader, lap_times_json = comp_data
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∞
            name_line = ""
            if name.strip() and not display_name.startswith("–ö–∞—Ä—Ç #"):
                name_line = f"üë§ –ò–º—è: {name}\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            basic_info = (
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üèÅ –ó–∞–µ–∑–¥: {race_number}\n"
                f"üèéÔ∏è –ö–∞—Ä—Ç: {num}\n"
                f"{name_line}"
                f"üèÜ –ü–æ–∑–∏—Ü–∏—è: {pos}\n"
                f"‚è±Ô∏è –õ—É—á—à–∏–π –∫—Ä—É–≥: {best_lap}\n"
                f"üî¨ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä—É–≥: {theor_lap_formatted}\n"
                f"üìä –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: {gap_to_leader}\n"
                f"üîÑ –ö—Ä—É–≥–æ–≤: {laps}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫—Ä—É–≥–æ–≤
            lap_table = _format_lap_times_table(lap_times_json)
            
            text = basic_info + "üìã –î–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä—É–≥–∞–º:\n" + lap_table
        else:
            text = "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        buttons = [
            [("üóë –£–¥–∞–ª–∏—Ç—å", f"askdel_stats_{key}")],
            [("‚Üê –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", f"stats_user_{user_id}")],
        ]
        await query.edit_message_text(text, reply_markup=_build_keyboard(buttons), parse_mode='Markdown')

    application.add_handler(CallbackQueryHandler(ask_delete_stats_callback, pattern=r"^askdel_stats_"))
    application.add_handler(CallbackQueryHandler(delete_stats_callback, pattern=r"^del_stats_"))
    application.add_handler(CallbackQueryHandler(cancel_stats_callback, pattern=r"^cancel_stats_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main() 