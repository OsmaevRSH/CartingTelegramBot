import aiohttp
from bs4 import BeautifulSoup
from datetime import datetime
from typing import List, Optional
from src.models.models import Race, DayRaces, Cart, ParsingError, Competitor, LapData
import json
import re
import base64
import struct


class ArchiveParser:
    """–ü–∞—Ä—Å–µ—Ä –∞—Ä—Ö–∏–≤–∞ –∑–∞–µ–∑–¥–æ–≤"""

    def __init__(self):
        self.url_string = "https://mayak.kartchrono.com/archive/"

    async def parse(self) -> List[DayRaces]:
        """–ü–∞—Ä—Å–∏—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ä—Ö–∏–≤–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.url_string) as response:
                    response.raise_for_status()
                    html = await response.text()

            return self._parse_html(html)
        except aiohttp.ClientError as e:
            raise ParsingError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        except Exception as e:
            raise ParsingError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

    def _parse_html(self, html: str) -> List[DayRaces]:
        """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–µ–∑–¥–∞—Ö"""
        soup = BeautifulSoup(html, 'html.parser')
        day_races = []

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º archiveData
        archive_data = soup.find(class_="archiveData")
        if not archive_data:
            raise ParsingError("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç archiveData")

        race_date = None
        races = []

        for element in archive_data.children:
            if hasattr(element, 'get') and element.get('class'):
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
                if 'archiveDateHeader' in element.get('class', []):
                    if race_date:
                        day_races.append(DayRaces(date=race_date, races=races))
                        races = []

                    date_text = element.get_text().strip()
                    try:
                        race_date = datetime.strptime(date_text, "%d.%m.%Y")
                    except ValueError:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_text}")
                        continue

                # –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–µ–∑–¥–∞
                elif 'archiveDataRow' in element.get('class', []):
                    link_element = element.find('a')
                    if link_element:
                        href = link_element.get('href', '')
                        # –ò—â–µ–º –Ω–æ–º–µ—Ä –∑–∞–µ–∑–¥–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Å—ã–ª–∫–∏
                        race_number_element = link_element.find()
                        if race_number_element:
                            race_number_element = race_number_element.find()
                            if race_number_element:
                                race_number = race_number_element.get_text().strip()
                            else:
                                race_number = link_element.get_text().strip()
                        else:
                            race_number = link_element.get_text().strip()

                        races.append(Race(number=race_number, href=href))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if race_date and races:
            day_races.append(DayRaces(date=race_date, races=races))

        return day_races


class RaceParser:
    """–ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–µ–∑–¥–∞"""

    def __init__(self):
        self.url_string = "https://mayak.kartchrono.com/archive/"

    async def parse(self, href: str) -> List[Cart]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–µ–∑–¥–∞"""
        try:
            url = self.url_string + href
            print(f"üîó –ü–∞—Ä—Å–∏–º URL: {url}")

            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    response.raise_for_status()
                    html = await response.text()

            return self._parse_html(html)
        except aiohttp.ClientError as e:
            raise ParsingError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        except Exception as e:
            raise ParsingError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

    def _parse_html(self, html: str) -> List[Cart]:
        """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–∞"""
        soup = BeautifulSoup(html, 'html.parser')
        race_carts = []

        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_table = soup.find(id="resultsTable")
        if not results_table:
            raise ParsingError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        data_rows = results_table.find_all(class_="dataRow")

        for row in data_rows:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            number_element = row.find(id="num")
            best_lap_element = row.find(id="best_lap_time")
            position_element = row.find(id="pos")

            number = number_element.get_text().strip() if number_element else ""
            best_lap = best_lap_element.get_text().strip() if best_lap_element else ""
            position = position_element.get_text().strip() if position_element else ""

            race_carts.append(Cart(
                id="",  # competitorid –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Swift –∫–æ–¥–µ
                number=number,
                best_lap=best_lap,
                position=position
            ))

        return race_carts


class FullRaceInfoParser:
    """–ü–∞—Ä—Å–µ—Ä –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–µ–∑–¥—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–∫—Ç–æ—Ä–∞—Ö"""

    def __init__(self):
        self.url_string = "https://mayak.kartchrono.com/archive/"

    async def parse(self, href: str, race_carts: List = None) -> List[Competitor]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö –∑–∞–µ–∑–¥–∞"""
        try:
            url = self.url_string + href
            print(f"üîó –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ URL: {url}")

            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    response.raise_for_status()
                    html = await response.text()

            return self._parse_html(html, race_carts)
        except aiohttp.ClientError as e:
            raise ParsingError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        except Exception as e:
            raise ParsingError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

    def _parse_html(self, html: str, race_carts: List = None) -> List[Competitor]:
        """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö –∏–∑ jsCompetitors"""
        soup = BeautifulSoup(html, 'html.parser')
        
        # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é jsCompetitors –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
        js_competitors_data = self._extract_js_competitors(html)
        if not js_competitors_data:
            raise ParsingError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è jsCompetitors")

        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        try:
            competitors_json = json.loads(js_competitors_data)
            return self._parse_competitors_json(competitors_json, race_carts)
        except json.JSONDecodeError as e:
            raise ParsingError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

    def _extract_js_competitors(self, html: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π jsCompetitors"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω var jsCompetitors = {...}
        pattern = r'var\s+jsCompetitors\s*=\s*(\{.*?\});'
        match = re.search(pattern, html, re.DOTALL)
        
        if match:
            return match.group(1)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ var
        pattern = r'jsCompetitors\s*=\s*(\{.*?\});'
        match = re.search(pattern, html, re.DOTALL)
        
        if match:
            return match.group(1)
            
        return None

    def _parse_competitors_json(self, competitors_json: dict, race_carts: List = None) -> List[Competitor]:
        """–ü–∞—Ä—Å–∏—Ç JSON –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Competitor"""
        competitors = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –∫—Ä—É–≥–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç–∞
        best_laps_dict = {}
        if race_carts:
            for cart in race_carts:
                best_laps_dict[cart.number] = cart.best_lap
        
        for competitor_id, competitor_data in competitors_json.items():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ JSON
            num = str(competitor_data.get('num', ''))
            name = str(competitor_data.get('name', ''))
            pos = int(competitor_data.get('pos', 0))
            laps = int(competitor_data.get('laps', 0))
            theor_lap = int(competitor_data.get('theor_lap', 0))
            binary_laps = str(competitor_data.get('binary_laps', ''))
            
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π –∫—Ä—É–≥ –∏–∑ RaceParser
            best_lap = best_laps_dict.get(num, "")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            theor_lap_formatted = self._format_time(theor_lap)
            display_name = name if name.strip() else f"–ö–∞—Ä—Ç #{num}"
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º binary_laps –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä—É–≥–∞—Ö
            lap_times = self._decode_binary_laps(binary_laps)
            
            competitor = Competitor(
                id=competitor_id,
                num=num,
                name=name,
                pos=pos,
                laps=laps,
                theor_lap=theor_lap,
                best_lap=best_lap,
                binary_laps=binary_laps,
                theor_lap_formatted=theor_lap_formatted,
                display_name=display_name,
                gap_to_leader=None,  # –í—ã—á–∏—Å–ª–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                lap_times=lap_times  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–æ–≤
            )
            
            competitors.append(competitor)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        competitors.sort(key=lambda x: x.pos)
        
        # –í—ã—á–∏—Å–ª—è–µ–º gap_to_leader –ø–æ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–º –∫—Ä—É–≥–∞–º
        if competitors:
            leader_theor_lap = competitors[0].theor_lap
            for competitor in competitors:
                if competitor.pos == 1:
                    competitor.gap_to_leader = "–õ–∏–¥–µ—Ä"
                else:
                    gap_ms = competitor.theor_lap - leader_theor_lap
                    competitor.gap_to_leader = f"+{self._format_time(gap_ms)}"
        
        return competitors

    def _format_time(self, time_ms: int) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç MM:SS.sss"""
        if time_ms <= 0:
            return "00:00.000"
            
        minutes = time_ms // 60000
        seconds = (time_ms % 60000) // 1000
        milliseconds = time_ms % 1000
        return f"{minutes}:{seconds:02d}.{milliseconds:03d}"

    def _decode_binary_laps(self, binary_laps: str) -> List[LapData]:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç binary_laps –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–≥–∞—Ö"""
        if not binary_laps:
            return []
        
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            binary_data = base64.b64decode(binary_laps)
            lap_times = []
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞–º–∏ –ø–æ 52 –±–∞–π—Ç–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º JS –∫–æ–¥–µ)
            offset = 0
            data_length = len(binary_data)
            
            while offset < data_length:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –±–ª–æ–∫–∞
                if offset + 52 > data_length:
                    break
                
                try:
                    # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–ª–æ–∫–∞ (52 –±–∞–π—Ç–∞)
                    competitor_id = struct.unpack('<i', binary_data[offset:offset+4])[0]
                    lap_id = struct.unpack('<i', binary_data[offset+4:offset+8])[0]
                    lap_num = struct.unpack('<i', binary_data[offset+8:offset+12])[0]
                    race_lap_num = struct.unpack('<i', binary_data[offset+12:offset+16])[0]
                    lap_pos = struct.unpack('<i', binary_data[offset+16:offset+20])[0]
                    
                    # –°–µ–∫—Ç–æ—Ä–∞
                    sector1 = struct.unpack('<i', binary_data[offset+20:offset+24])[0]
                    sector2 = struct.unpack('<i', binary_data[offset+24:offset+28])[0]
                    sector3 = struct.unpack('<i', binary_data[offset+28:offset+32])[0]
                    
                    # –í—Ä–µ–º—è –∫—Ä—É–≥–∞
                    lap_time = struct.unpack('<i', binary_data[offset+32:offset+36])[0]
                    
                    # Timestamp (8 –±–∞–π—Ç)
                    timestamp_low = struct.unpack('<I', binary_data[offset+36:offset+40])[0]
                    timestamp_high = struct.unpack('<I', binary_data[offset+40:offset+44])[0]
                    
                    # –§–ª–∞–≥–∏
                    lap_flags = struct.unpack('<i', binary_data[offset+44:offset+48])[0]
                    
                    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Å–µ–∫—Ç–æ—Ä
                    sector4 = struct.unpack('<i', binary_data[offset+48:offset+52])[0]
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç LapData
                    if lap_num == 0:
                        # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫—Ä—É–≥
                        lap_data = LapData(
                            lap_number=0,
                            lap_time="",
                            sector1=None,
                            sector2=self._format_time(sector2) if sector2 > 0 else None,
                            sector3=self._format_time(sector3) if sector3 > 0 else None,
                            sector4=self._format_time(sector4) if sector4 > 0 else None
                        )
                    else:
                        # –û–±—ã—á–Ω—ã–π –∫—Ä—É–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º lap_time –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —Ä–∞–∑—É–º–Ω—ã–π
                        if lap_time > 0 and lap_time < 600000:  # –†–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è –∫—Ä—É–≥–∞ (–¥–æ 10 –º–∏–Ω—É—Ç)
                            final_lap_time = lap_time
                        else:
                            # –ï—Å–ª–∏ lap_time –Ω–µ—Ä–∞–∑—É–º–Ω—ã–π, –≤—ã—á–∏—Å–ª—è–µ–º –∫–∞–∫ —Å—É–º–º—É —Å–µ–∫—Ç–æ—Ä–æ–≤
                            final_lap_time = sector1 + sector2 + sector3 + sector4
                        
                        lap_data = LapData(
                            lap_number=lap_num,
                            lap_time=self._format_time(final_lap_time) if final_lap_time > 0 else None,
                            sector1=self._format_time(sector1) if sector1 > 0 else None,
                            sector2=self._format_time(sector2) if sector2 > 0 else None,
                            sector3=self._format_time(sector3) if sector3 > 0 else None,
                            sector4=self._format_time(sector4) if sector4 > 0 else None
                        )
                    
                    lap_times.append(lap_data)
                    
                except struct.error:
                    pass
                
                offset += 52
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∫—Ä—É–≥–∞
            lap_times.sort(key=lambda x: x.lap_number)
            
            return lap_times
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ binary_laps: {e}")
            return []
    
    def _calculate_sector1(self, lap_time_ms: int, sector2_ms: int, sector3_ms: int, sector4_ms: int) -> Optional[str]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –∫–∞–∫ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä—É–≥–∞"""
        try:
            if sector2_ms > 0 and sector3_ms > 0 and sector4_ms > 0:
                sector1_ms = lap_time_ms - sector2_ms - sector3_ms - sector4_ms
                if 1000 <= sector1_ms <= 120000:  # –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞
                    return self._format_time(sector1_ms)
        except:
            pass
        return None
